{"componentChunkName":"component---src-templates-blog-post-js","path":"/CS/Python/2022-08-30-beautifulsoup/","result":{"data":{"allMarkdownRemark":{"totalCount":29},"markdownRemark":{"id":"c0259c30-917d-50d1-917b-c03ce659a48d","html":"<h2>기초 HTML 분석</h2>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> urllib.request </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> urlopen</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> bs4 </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> BeautifulSoup</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">html </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> urlopen(</span><span class=\"mtk11\">&quot;https://www.pythonscraping.com/pages/page1.html&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bs </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> BeautifulSoup(html.read(), </span><span class=\"mtk11\">&#39;html.parser&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">print</span><span class=\"mtk1\">(bs.tag.subTag) </span><span class=\"mtk3\"># tag, subTag는 가상의 태그.</span></span></span></code></pre>\n<br>\n<h3><code>BeautifulSoup()</code>의 인자들</h3>\n<ul>\n<li>첫번째로 HTML 텍스트를 전달한다.</li>\n<li>두번째로 BeautifulSoup가 객체를 만들때 쓰는 구문 분석기(parser)를 전달한다.\n<img src=\"img/parsers.png\" alt=\"\">\n<ul>\n<li><code>html.parser</code> : 별도의 C 패키지 설치 없이 사용할 수 있는 분석기</li>\n<li><code>lxml</code> : 형식을 지키지 않은 HTML 코드를 분석할 때 <code>html.parser</code>보다 나은 성능을 보인다.</li>\n<li><code>html5lib</code> : <code>lxml</code>보다 다양한 에러를 수정할 수 있다. 닫히지 않은 태그, 계층 구조가 잘못된 태그를 일일이 수정한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>신뢰할 수 있는 연결</h3>\n<ul>\n<li><code>urlopen()</code>에서 등장할 수 있는 에러\n<ul>\n<li>페이지를 찾을 수 없거나(\"404 Page Not Found\"), URL 해석에서 에러가 생긴 경우(\"URLError\")</li>\n<li>서버를 찾을 수 없는 경우(\"500 Internal Server Error\")</li>\n<li><code>try ... except</code> 구문을 통해 예외를 처리한다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> urllib.request </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> urlopen</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> urlib.error </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> HTTPError, URLError</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">try</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    html </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> urlopen(</span><span class=\"mtk11\">&#39;https://pythonscrapingthisurldoesnotexist.com&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">except</span><span class=\"mtk1\"> HTTPError </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> e:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(e)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">except</span><span class=\"mtk1\"> URLError </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> e:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;The server could not be found!&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">else</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;Got HTML successfully.&#39;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<ul>\n<li><code>bs.tag.subTag</code>에서 등장할 수 있는 에러\n<ul>\n<li>BeautifulSoup는 존재하지 않는 태그에 접근을 시도하면 None 객체를 반환한다. 이때 None 객체에 대해 태그에 접근하려고 하면 AttributeError가 일어난다.</li>\n<li>두 개의 태그의 존재 유무를 명시적으로 체크한다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">try</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    badContent </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> bs.tag.subTag</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">except</span><span class=\"mtk1\"> </span><span class=\"mtk15 mtki\">AttributeError</span><span class=\"mtk1\"> </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> e: </span><span class=\"mtk3\"># tag1이 존재하지 않는 경우</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;tag was not found.&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">else</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> badContent </span><span class=\"mtk7\">==</span><span class=\"mtk1\"> </span><span class=\"mtk4\">None</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;subTag was not found.&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">else</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(badContent)</span></span></span></code></pre>\n<br>\n<br>\n<h2>고급 HTML 분석</h2>\n<h3>고급 HTML 분석을 사용하지 않는 방법</h3>\n<ul>\n<li>더 나은 HTML 구조를 갖춘 모바일 버전 사이트 찾아보기</li>\n<li>자바스크립트 파일을 불러와 분석하기</li>\n<li>URL에 원하는 정보가 있는지 찾아보기</li>\n<li>원하는 정보를 다른 소스에서 가져올 수 있는지 고려하기</li>\n</ul>\n<br>\n<h3>CSS 활용하기</h3>\n<ul>\n<li>\n<p>CSS는 HTML 요소를 구분해 서로 다른 스타일을 적용하므로 웹 스크레이퍼에 도움이 된다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nameList </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> bs.findAll(</span><span class=\"mtk11\">&#39;span&#39;</span><span class=\"mtk1\">, {</span><span class=\"mtk11\">&#39;class&#39;</span><span class=\"mtk1\">:</span><span class=\"mtk11\">&#39;green&#39;</span><span class=\"mtk1\">})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> name </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> nameList:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(name.get_text())</span></span></span></code></pre>\n<p>위 코드는 <code>&#x3C;span class=\"green\">&#x3C;/span></code> 태그에 들어있는 텍스트만 선택해서 파이썬 리스트로 추출한다.</p>\n</li>\n<li>\n<p><code>get_text()</code>는 모든 태그를 제거한 유니코드 텍스트 문자열을 반환한다. 일반적으로 문서의 태그 구조를 유지하는 것이 바람직하므로 최종 데이터 출력 또는 저장 직전에 사용해야 한다.</p>\n</li>\n</ul>\n<br>\n<h3>find()와 findAll() 메서드 인자들</h3>\n<ul>\n<li>\n<p>find(tag, attributes, recursive, text, keywords)</p>\n</li>\n<li>\n<p>findAll(tag, attributes, recursive, text, limit, keywords)</p>\n</li>\n<li>\n<p><code>tag</code> : 태그 이름인 문자열 또는 태그 이름 리스트를 넘긴다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bs.findAll({</span><span class=\"mtk11\">&#39;h1&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;h2&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;h3&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;h4&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;h5&#39;</span><span class=\"mtk1\">})</span></span></span></code></pre>\n</li>\n<li>\n<p><code>attributes</code> : 속성으로 이루어진 파이썬 딕셔너리를 받고, 그 중 하나에 일치하는 태그를 모두 찾는다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bs.findAll(</span><span class=\"mtk11\">&#39;span&#39;</span><span class=\"mtk1\">, {</span><span class=\"mtk11\">&#39;class&#39;</span><span class=\"mtk1\">: {</span><span class=\"mtk11\">&#39;green&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;red&#39;</span><span class=\"mtk1\">}})</span></span></span></code></pre>\n</li>\n<li>\n<p><code>recursive</code> : 불리언으로, True이면 매개변수에 일치하는 자식과 자식의 자식을 검색하며 False이면 최상위 태그에 대해서만 검색한다.</p>\n</li>\n<li>\n<p><code>text</code> : 태그의 속성이 아니라 텍스트 콘텐츠에서 일치하는 점을 검색한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">nameList </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> bs.findAll(</span><span class=\"mtk19 mtki\">text</span><span class=\"mtk7\">=</span><span class=\"mtk11\">&#39;the prince&#39;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n</li>\n<li>\n<p><code>limit</code> : 페이지의 항목을 처음부터 몇번 탐색할 것인지 지정한다. <code>find('')</code>는 <code>findAll('', limit=1)</code>과 같다.</p>\n</li>\n<li>\n<p><code>keyword</code> : 특정 속성이 포함된 태그를 AND 연산으로 검색한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bs.findAll(</span><span class=\"mtk11\">&#39;&#39;</span><span class=\"mtk1\">, {</span><span class=\"mtk11\">&#39;id&#39;</span><span class=\"mtk1\">:</span><span class=\"mtk11\">&#39;text&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;class&#39;</span><span class=\"mtk1\">:</span><span class=\"mtk11\">&#39;green&#39;</span><span class=\"mtk1\">})</span></span></span></code></pre>\n<ul>\n<li>주어진 조건을 모두 만족하는 태그 목록을 반환한다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<h3>BeautifulSoup의 객체</h3>\n<ol>\n<li>BeautifulSoup 객체 : 파싱된 문서 전체를 의미한다.</li>\n<li>Tag 객체 : XML 또는 HTML 태그를 의미한다.</li>\n<li>NavigableString 객체 : 태그가 아니라 태그 안에 있는 텍스트를 의미한다.</li>\n<li>Comment 객체 : HTML 주석을 의미한다.</li>\n</ol>\n<br>\n<h3>Tree Navigation</h3>\n<ol>\n<li>자식(children)과 자손(descendants) 다루기\n<ul>\n<li>자식은 부모보다 한 태그 아래에 있고, 자손은 조상보다 하위 단계에 있는 모든 태그이다. BeautifulSoup는 항상 선택된 태그의 자손을 다룬다.</li>\n<li>자식만 찾을 때는 <code>.contents</code> 또는 <code>.children</code>을 사용한다. 전자는 리스트를 반환하며, 후자는 iterator를 반환한다.</li>\n</ul>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> child </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> bs.find(</span><span class=\"mtk11\">&#39;span&#39;</span><span class=\"mtk1\">, {</span><span class=\"mtk11\">&#39;class&#39;</span><span class=\"mtk1\">:</span><span class=\"mtk11\">&#39;green&#39;</span><span class=\"mtk1\">}).children:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(child)</span></span></span></code></pre>\n</li>\n<li>형제(sibling) 다루기\n<ul>\n<li>테이블에서 데이터를 구할 때, 특히 테이블에 타이틀 행이 있는 경우 유용하게 활용할 수 있다. <code>.next_siblings</code>은 해당 객체를 제외한 다음 형제만 가져온다. 즉, 타이틀 행을 선택하면 그 타이틀 행을 제외한 모든 테이블 행을 가져온다.</li>\n</ul>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> sibling </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> bs.find(</span><span class=\"mtk11\">&#39;span&#39;</span><span class=\"mtk1\">, {</span><span class=\"mtk11\">&#39;class&#39;</span><span class=\"mtk1\">:</span><span class=\"mtk11\">&#39;green&#39;</span><span class=\"mtk1\">}).next_siblings:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(sybling)</span></span></span></code></pre>\n</li>\n<li>부모(parents) 다루기\n<ul>\n<li>태그의 부모를 검색하기 위해 <code>.parent</code> 또는 <code>.parents</code>를 활용한다.</li>\n</ul>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">print</span><span class=\"mtk1\">(bs.find(</span><span class=\"mtk11\">&#39;img&#39;</span><span class=\"mtk1\">, {</span><span class=\"mtk11\">&#39;src&#39;</span><span class=\"mtk1\">:</span><span class=\"mtk11\">&#39;../img/gifts/img1.jpg&#39;</span><span class=\"mtk1\">})).parent.previous_sibling.get_text()</span></span></span></code></pre>\n</li>\n</ol>\n<br>\n<h3>정규 표현식 (Regular Expression) 활용하기</h3>\n<p>정규 표현식은 BeautifulSoup 표현식 어디든 매개변수로 삽입할 수 있다.</p>\n<p>예를 들어 <code>&#x3C;img src='../img/gifts/img3.jpg'></code> 형태의 제품 이미지를 여러개 찾는 것이 목표라고 하자. 이때 <code>findAll('img')</code>로 모든 이미지 태그를 가져올 시에 페이지의 불필요하거나 빈 이미지, 숨은 이미지들을 모두 가져오게 된다. 따라서 제품 이미지만 가져오기 위해 위의 제품 이미지 형태를 정규 표현식으로 전달할 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">images </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> bs.findAll(</span><span class=\"mtk11\">&#39;img&#39;</span><span class=\"mtk1\">, {</span><span class=\"mtk11\">&#39;src&#39;</span><span class=\"mtk1\">:re.compile(</span><span class=\"mtk11\">&#39;\\.\\.\\/img\\/gifts/img.*\\.jpg&#39;</span><span class=\"mtk1\">)})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">for</span><span class=\"mtk1\"> image </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> images:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(image[</span><span class=\"mtk11\">&#39;src&#39;</span><span class=\"mtk1\">])</span></span></span></code></pre>\n<br>\n<h3>람다 표현식</h3>\n<p>특정 타입의 함수를 findAll 함수의 매개변수로 넘길 수 있다. 이 함수들은 태그 객체를 매개변수로 받고 불리언만 반환해야 한다. BeautifulSoup는 모든 태그 객체를 이 함수에서 평가하고, True로 평가된 태그만 반환한다.</p>\n<p>예를 들어 다음 코드는 속성이 두개인 태그만 가져온다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bs.findAll(lambd tag: </span><span class=\"mtk15\">len</span><span class=\"mtk1\">(tag.attrs) </span><span class=\"mtk7\">==</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>다음 코드는 <code>text</code> 기능을 lambda 함수로 표현한 예이다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">bs.findAll(</span><span class=\"mtk15 mtki\">lambda</span><span class=\"mtk1\"> </span><span class=\"mtk19 mtki\">tag</span><span class=\"mtk1\">: tag.get_text() </span><span class=\"mtk7\">==</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;the prince&#39;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<br>\n<br>\n<h2>참고 자료</h2>\n<ul>\n<li>『파이썬으로 웹 크롤러 만들기(Web Scraping with Python)』, 라이언 미첼(Ryan Mitchell)</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtki { font-style: italic; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk4 { color: #F280D0; }\n  .abyss .mtk19 { color: #2277FF; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"python 크롤링 - beautifulsoup 모듈","date":"August 30, 2022"}}},"pageContext":{"slug":"/CS/Python/2022-08-30-beautifulsoup/","previous":{"fields":{"slug":"/AI/NLP/siamese-nn/"},"frontmatter":{"title":"[Paper] Siamese Neural Network, 2015"}},"next":{"fields":{"slug":"/CS/Python/2022-08-30-basic-crawler/"},"frontmatter":{"title":"python 크롤링 - 기초 크롤러"}}}},"staticQueryHashes":["1185972000","3231742164"],"slicesMap":{}}