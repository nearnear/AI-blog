{"componentChunkName":"component---src-templates-blog-post-js","path":"/CS/Python/2022-11-10-python-file/","result":{"data":{"allMarkdownRemark":{"totalCount":49},"markdownRemark":{"id":"b6e617e8-c762-5e55-9322-819535e67067","html":"<h2>파일 처리</h2>\n<p>예시를 통해 알아보자. 다음 코드는 파일을 읽어들이고 빈줄을 제거해 저장한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> sys</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># filename 파일에서 strip이 존재하는 줄만 리스트에 저장하여 반환한다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">read_file_only_strip</span><span class=\"mtk1\">(</span><span class=\"mtk19 mtki\">filename</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    lines </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> []</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">with</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(filename) </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> f: </span><span class=\"mtk3\"># 파일 읽기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">for</span><span class=\"mtk1\"> line </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> f:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> line.strip():</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                lines.append(line)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> lines</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># lines 리스트의 항목을 하나씩 filename 파일에 쓴다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">write_file</span><span class=\"mtk1\">(</span><span class=\"mtk19 mtki\">lines</span><span class=\"mtk1\">, </span><span class=\"mtk19 mtki\">filename</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    f </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">None</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">with</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(filename, </span><span class=\"mtk11\">&quot;w&quot;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> f: </span><span class=\"mtk3\"># 파일 쓰기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">for</span><span class=\"mtk1\"> line </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> lines:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            f.write(line)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 앞서 정의한 두 함수로 파일을 읽어들여 strip을 삭제해 저장한다. </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">remove_blank_lines</span><span class=\"mtk1\">():</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 파일이 없는 경우, 아무것도 출력하지 않는다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> </span><span class=\"mtk15\">len</span><span class=\"mtk1\">(sys.argv) </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&quot;&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">for</span><span class=\"mtk1\"> filename </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> sys.argv[</span><span class=\"mtk4\">1</span><span class=\"mtk1\">:]:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        lines </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> read_file_only_strip(filename)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> lines:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            write_file(lines, filename)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">if</span><span class=\"mtk1\"> __name__ </span><span class=\"mtk7\">==</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&quot;__main__&quot;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    remove_blank_lines()</span></span></span></code></pre>\n<br>\n<br>\n<h2>파일 처리 메서드</h2>\n<h3>open(), close()</h3>\n<p><code>open(filename, mode, encoding)</code> 메서드는 파일 객체를 반환한다.\n<code>close()</code>는 파일 객체를 닫으며 try .. except .. finally 구문으로 다음과 같이 사용할 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">read_file_lines</span><span class=\"mtk1\">(</span><span class=\"mtk19 mtki\">filename</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    lines </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> []</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    f </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk4\">None</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">try</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        f </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(filename)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">for</span><span class=\"mtk1\"> line </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> f:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> line.strip():</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                lines.append(line)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">except</span><span class=\"mtk1\"> (</span><span class=\"mtk15 mtki\">IOError</span><span class=\"mtk1\">, </span><span class=\"mtk15 mtki\">OSError</span><span class=\"mtk1\">) </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> err:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(err)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">finally</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> f:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            f.close()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">return</span><span class=\"mtk1\"> lines</span></span></span></code></pre>\n<p>또는 처음의 예시처럼 <code>with open(...) as f_object</code>로 close()를 명시하지 않고 같은 기능을 구현할 수 있다.\nclose()는 열린 파일이 차지하는 시스템 자원을 해제(free up)한다. 파일을 닫으면 True를 반환한다.</p>\n<p>open()의 인자인 mode는 문자열로 지정하며 디폴트는 읽기 모드(<code>r</code>)이다.</p>\n<ul>\n<li><code>r</code> : 파일 읽기 모드.</li>\n<li><code>w</code> : 파일 쓰기 모드. 동명 파일이 있는 경우, 대체한다.</li>\n<li><code>a</code> : 파일 추가 모드. 동명 파일이 있는 경우, 그 파일 끝에 내용을 추가한다.</li>\n<li><code>r+</code> : 파일 읽기와 쓰기 모드.</li>\n<li><code>t</code> : 파일의 종류인 텍스트 모드.</li>\n<li><code>b</code> : 파일의 종류인 바이너리 모드.</li>\n</ul>\n<p>예를 들어 <code>rt</code>는 텍스트 모드로 읽기를, <code>rb</code>는 바이너리로 읽기이다. <code>wt</code>, <code>wb</code>, <code>at</code> 등도 마찬가지이다.</p>\n<p>encoding도 문자열로 지정하며 디폴트는 시스템 기본 인코딩이다. 맥 OS의 디폴트는 <code>'utf-8'</code>이며 윈도우는 <code>'cp949'</code>이다.</p>\n<br>\n<h3>read(), readline(), readlines()</h3>\n<p><code>read(size)</code>는 size 인자 만큼의 바이트 수로 내용을 읽어들여 open()에서 지정한 mode로 반환한다. 인수가 생략된\n경우 전체 파일의 내용을 반환한다. 파일의 끝에서는 빈 문자열을 반환한다.\n<code>readline()</code>은 한 줄만 읽어들인다. 파일의 마지막 행에서만 개행 문자가 생략된다.\n<code>readlines(size)</code>는 size 만큼 읽어들이고, 행을 완성하는 데 필요한 만큼 더 읽어서 반환한다.\n인수를 전달하지 않으면 모든 데이터 행을 포함한 리스트를 반환한다. 즉 언제나 완전한 행을 반환한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;open_me.py&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f.readlines()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[</span><span class=\"mtk11\">&#39;def function1():</span><span class=\"mtk4\">\\n</span><span class=\"mtk11\">&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;    print(&#39;Did you call me?&#39;)</span><span class=\"mtk4\">\\n</span><span class=\"mtk11\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;</span><span class=\"mtk4\">\\n</span><span class=\"mtk11\">&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;</span><span class=\"mtk4\">\\n</span><span class=\"mtk11\">&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;if __name__ == &#39;__main__&#39;:</span><span class=\"mtk4\">\\n</span><span class=\"mtk11\">&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;    function1()</span><span class=\"mtk4\">\\n</span><span class=\"mtk11\">&#39;</span><span class=\"mtk1\">]</span></span></span></code></pre>\n<br>\n<h3>write()</h3>\n<p><code>write(text)</code>는 text를 모드에서 지정한 객체로 파일에 쓴 다음, None을 반환한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;new_file.txt&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;w&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">for</span><span class=\"mtk1\"> i </span><span class=\"mtk7\">in</span><span class=\"mtk1\"> </span><span class=\"mtk15\">range</span><span class=\"mtk1\">(</span><span class=\"mtk4\">5</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">...</span><span class=\"mtk1\">     f.write(</span><span class=\"mtk15 mtki\">f</span><span class=\"mtk11\">&quot;</span><span class=\"mtk4\">{</span><span class=\"mtk1\">i</span><span class=\"mtk4\">}</span><span class=\"mtk11\"> 번째 행입니다.</span><span class=\"mtk4\">\\n</span><span class=\"mtk11\">&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;new_file.py&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;r&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f.readlines()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[</span><span class=\"mtk11\">&#39;0 번째 행입니다.&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;1 번째 행입니다.&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;2 번째 행입니다.&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;3 번째 행입니다.&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;4 번째 행입니다.&#39;</span><span class=\"mtk1\">]</span></span></span></code></pre>\n<br>\n<h3>tell(), seek()</h3>\n<p><code>tell()</code>은 파일의 현재 위치를 나타내는 바이트단위 정수를 반환한다. <code>seek(offset, from-what)</code>은\n파일내 탐색 위치를 from-what 포인트에서 offset을 더한 값으로 변경하여 반환한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f.tell()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">110</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f.seek(</span><span class=\"mtk4\">10</span><span class=\"mtk1\">, </span><span class=\"mtk4\">0</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">10</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f.tell()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">10</span></span></span></code></pre>\n<br>\n<h3>input()</h3>\n<p><code>input()</code>은 사용자의 입력을 받으며, return 키를 누를 때까지 대기한다.</p>\n<br>\n<h3>fileno()</h3>\n<p><code>fileno()</code>는 파일에 접근하는 OS의 추상 키인 파일 서술자(file descriptor)를 반환한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> f.fileno()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">8</span></span></span></code></pre>\n<br>\n<br>\n<h2>shutil 모듈</h2>\n<p>shutil 모듈을 통해 터미널에서 파일을 조작할 수 있다. 다음과 같은 <code>change_ext_file.py</code>가 있을 때:</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> os</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> sys</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">import</span><span class=\"mtk1\"> shutil</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 특정 파일의 확장자를 바꾼다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">def</span><span class=\"mtk1\"> </span><span class=\"mtk6\">change_file_ext</span><span class=\"mtk1\">():</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 만약 한개 이하의 sys만 있다면 상태를 출력하고 exit한다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">if</span><span class=\"mtk1\"> </span><span class=\"mtk15\">len</span><span class=\"mtk1\">(sys.argv) </span><span class=\"mtk7\">&lt;</span><span class=\"mtk1\"> </span><span class=\"mtk4\">2</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(</span><span class=\"mtk15 mtki\">f</span><span class=\"mtk11\">&quot;Usage : python </span><span class=\"mtk4\">{</span><span class=\"mtk1\">sys.argv[</span><span class=\"mtk4\">0</span><span class=\"mtk1\">]</span><span class=\"mtk4\">}</span><span class=\"mtk11\"> filename.old_ext &#39;new_ext&#39;&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        sys.exit()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># sys.argv에서 이름을 가져와 출력한다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    name </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> os.path.splitext(sys.argv[</span><span class=\"mtk4\">1</span><span class=\"mtk1\">] </span><span class=\"mtk7\">+</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;.&#39;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">+</span><span class=\"mtk1\"> sys.argv[</span><span class=\"mtk4\">2</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(name)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\"># 새 확장자의 이름으로 복사본을 만든다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">try</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        shutil.copyfile(sys.argv[</span><span class=\"mtk4\">1</span><span class=\"mtk1\">], name)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">except</span><span class=\"mtk1\"> </span><span class=\"mtk15 mtki\">OSError</span><span class=\"mtk1\"> </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> err:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">print</span><span class=\"mtk1\">(err)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">if</span><span class=\"mtk1\"> __name__ </span><span class=\"mtk7\">==</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;__main__&#39;</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    change_file_ext()</span></span></span></code></pre>\n<p>이제 이 파일을 활용해 터미널에서 <code>some_file.py</code>를 <code>txt</code>확장자로 바꿀 수 있다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">$</span><span class=\"mtk1\"> python change_ext_file.py some_file.py txt</span></span></span></code></pre>\n<br>\n<br>\n<h2>pickle 모듈</h2>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>python object</mtext><munderover><mo stretchy=\"true\" minsize=\"3.0em\">⇌</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mtext>unpickling (deserialization)</mtext></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mtext>pickling (serialization)</mtext></mpadded></munderover><mtext>str(binary)</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{python object} \n\\xrightleftharpoons[\\text{unpickling (deserialization)}]{\\text{pickling (serialization)}}\n\\text{str(binary)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.163em;vertical-align:-0.919em;\"></span><span class=\"mord text\"><span class=\"mord\">python object</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.244em;\"><span style=\"top:-3.435em;\"><span class=\"pstrut\" style=\"height:2.716em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">pickling (serialization)</span></span></span></span></span><span class=\"svg-align\" style=\"top:-2.608em;\"><span class=\"pstrut\" style=\"height:2.716em;\"></span><span class=\"stretchy\" style=\"height:0.716em;min-width:1.75em;\"><span class=\"halfarrow-left\" style=\"height:0.716em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.716em\" viewBox=\"0 0 400000 716\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z\"></path></svg></span><span class=\"halfarrow-right\" style=\"height:0.716em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"0.716em\" viewBox=\"0 0 400000 716\" preserveAspectRatio=\"xMaxYMin slice\"><path d=\"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z\"></path></svg></span></span></span><span style=\"top:-1.972em;\"><span class=\"pstrut\" style=\"height:2.716em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">unpickling (deserialization)</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.919em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">str(binary)</span></span></span></span></span></span></div>\n<p>pickle 모듈을 통해 파이썬 객체를 바이너리 형태로 저장했다가 다시 불러낼 수 있다. 정확히는 바이너리 모드로\n파일에 접근하여 파이썬 객체를 문자열 표현으로 변환하여 피클링(직렬화)을 한 뒤, 저장된 피클을 꺼내서 언피클링(역직렬화) 한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> pickle</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> x </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span><span class=\"mtk11\">&#39;circum1&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&#39;action1&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;circum2&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&#39;action2&#39;</span><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">with</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&quot;tactics.pkl&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;wb&quot;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> f: </span><span class=\"mtk3\"># pickle!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">...</span><span class=\"mtk1\">     pickle.dump(x, f)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">with</span><span class=\"mtk1\"> </span><span class=\"mtk15\">open</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&quot;tactics.pkl&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&quot;rb&quot;</span><span class=\"mtk1\">) </span><span class=\"mtk7\">as</span><span class=\"mtk1\"> f: </span><span class=\"mtk3\"># unpickle!</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">...</span><span class=\"mtk1\">     tactics </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> pickle.load(f)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> tactics</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">{</span><span class=\"mtk11\">&#39;circum1&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&#39;action1&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk11\">&#39;circum2&#39;</span><span class=\"mtk1\">: </span><span class=\"mtk11\">&#39;action2&#39;</span><span class=\"mtk1\">}</span></span></span></code></pre>\n<br>\n<br>\n<h2>struct 모듈</h2>\n<p>struct 모듈을 통해 파이썬 객체를 이진 표현으로 변환하거나 역변환할 수 있다. 객체는 특정 길이의 문자열만 처리한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"python\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> struct</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> abc </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> struct.pack(</span><span class=\"mtk11\">&#39;&gt;hhl&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk4\">1</span><span class=\"mtk1\">, </span><span class=\"mtk4\">2</span><span class=\"mtk1\">, </span><span class=\"mtk4\">3</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> abc</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15 mtki\">b</span><span class=\"mtk11\">&#39;</span><span class=\"mtk4\">\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x03</span><span class=\"mtk11\">&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> struct.unpack(</span><span class=\"mtk11\">&#39;&gt;hhl&#39;</span><span class=\"mtk1\">, abc)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">(</span><span class=\"mtk4\">1</span><span class=\"mtk1\">, </span><span class=\"mtk4\">2</span><span class=\"mtk1\">, </span><span class=\"mtk4\">3</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">&gt;&gt;&gt;</span><span class=\"mtk1\"> struct.calcsize(</span><span class=\"mtk11\">&#39;&gt;hhl&#39;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">8</span></span></span></code></pre>\n<p>struct에는 포맷을 전달하기 위한 Format character가 있다. <a href=\"https://docs.python.org/3/library/struct.html#format-characters\">공식문서</a>를 참고하자. 여기서 <code>></code>은 big-endian, <code>h</code>는 C 타입 short, <code>l</code>은 C 타입 long을 의미한다.</p>\n<ul>\n<li><code>pack(format, v1, v2, ...)</code>은 v1, v2, ... 를 format 형식을 따라 바이트 객체를 반환한다.</li>\n<li><code>unpack(format, buffer)</code>는 format 형식의 byte 또는 bytearray 객체를 buffer로 받아 값을\n반환한다.</li>\n<li><code>calcsize(format)</code>는 format이 차지할 바이트 수를 반환한다.</li>\n</ul>\n<p>format과 buffer가 일치하지 않는 경우, struct.error 예외가 발생한다.</p>\n<pre class=\"grvsc-container abyss\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">&gt;&gt;&gt; struct.unpack(&#39;&gt;hll&#39;, abc)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">Traceback (most recent call last):</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  File &quot;/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/code.py&quot;, line 90, in runcode</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    exec(code, self.locals)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  File &quot;&lt;input&gt;&quot;, line 1, in &lt;module&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">struct.error: unpack requires a buffer of 10 bytes</span></span></code></pre>\n<br>\n<br>\n<h2>참고자료</h2>\n<ul>\n<li>An Introduction to Python &#x26; Algorithms, Mia Stein</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtki { font-style: italic; }\n  .abyss .mtk7 { color: #225588; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .mtk6 { color: #DDBB88; }\n  .abyss .mtk19 { color: #2277FF; }\n  .abyss .mtk4 { color: #F280D0; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .mtk8 { color: #F8F8F0; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"[Python] 파일 처리 - shutil, pickle, struct","date":"November 10, 2022"}}},"pageContext":{"slug":"/CS/Python/2022-11-10-python-file/","previous":{"fields":{"slug":"/AI/Vision/fgfa/"},"frontmatter":{"title":"[Paper] FGFA for Video Object Detection, 2017"}},"next":{"fields":{"slug":"/CS/DBMS/2022-12-31-dbms-mysql-basics/"},"frontmatter":{"title":"[MySQL] Basics"}}}},"staticQueryHashes":["1185972000","3231742164"],"slicesMap":{}}