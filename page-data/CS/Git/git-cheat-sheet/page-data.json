{"componentChunkName":"component---src-templates-blog-post-js","path":"/CS/Git/git-cheat-sheet/","result":{"data":{"allMarkdownRemark":{"totalCount":16},"markdownRemark":{"id":"360193da-52f3-51f2-81c8-5ed4dca72fc3","html":"<h2>1. 배시 쉘 명령어 (Bash shell commands)</h2>\n<ul>\n<li>디렉토리 .git 내 모든 파일 출력\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># look inside a git directory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">ls -l .git/</span></span></span></code></pre>\n</li>\n<li>숨겨진 파일을 포함해 현재 디렉토리에 위치한 모든 파일 출력\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># list files with a dot (hidden files)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">ls -la</span></span></span></code></pre>\n</li>\n<li>파일 file_name.py 생성하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># create a file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">touch file_name.py</span></span></span></code></pre>\n</li>\n<li>atom 에디터로 파일 file_name.py 열기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># open a file with atom editor</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">atom file_name.py</span></span></span></code></pre>\n</li>\n<li>파일 file_name.py 내용 쉘에서 보기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># lookup a file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cat file_name.py</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<br>\n<h2>2. 설정 명령어 (Configuration commands)</h2>\n<ul>\n<li>깃 현재 설정 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># check current configuration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git config -l</span></span></span></code></pre>\n</li>\n<li>깃의 이름, 이메일 설정 변경하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># change configuration</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git config --global user.name </span><span class=\"mtk11\">&quot;user_name&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git config --global user.email </span><span class=\"mtk11\">&quot;user_email&quot;</span></span></span></code></pre>\n</li>\n<li>깃허브 키를 15분 동안 캐시하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># cache github key for 15 minutes</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git config --global credential.helper cache</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<br>\n<h2>3. 스테이징 &#x26; 커밋 명령어 (Staging &#x26; Commit commands)</h2>\n<ul>\n<li>현재 디렉토리에서 새로운 깃 르포 생성하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># initialize an empty git repository in current directory</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git init</span></span></span></code></pre>\n</li>\n<li>현재 워킹 트리의 정보 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># get information of current working tree</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git status</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<h3>스테이징 에리어 조작하기</h3>\n<ul>\n<li>파일 file_name.py를 스테이징 에리어에 올리기 (커밋 준비)\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># command git to track follwing file</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git add file_name.py</span></span></span></code></pre>\n</li>\n<li>모든 변경 사항 스테이징 에리어에 올리기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># stage every change in the staging area</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git add </span><span class=\"mtk15\">.</span></span></span></code></pre>\n</li>\n<li>스테이징 되었지만 커밋되지 않은 파일 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># alias to --cached, show all staged but not commited files</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git diff --staged</span></span></span></code></pre>\n</li>\n<li>스테이징 에리어 리셋하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># reset(clear) staging area</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset HEAD --</span></span></span></code></pre>\n</li>\n<li>파일 file1.py의 이름을 file2.py로 변경하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># rename file1 with file2</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># similar to Linux mv command</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git mv [file1.py] [file2.py]</span></span></span></code></pre>\n</li>\n<li>파일 file_name.py 삭제하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># remove file_name.py from working space</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># similar to Linux rm command</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git rm [file_name.py]</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<h3>커밋하기</h3>\n<ul>\n<li>커밋 메시지 창을 열며 현재 스테이징 에리어에 있는 것을 전부 커밋하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># commit everything in current staging area</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># opens a text editor to enter a commit message</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit</span></span></span></code></pre>\n</li>\n<li>커밋 메시지를 입력하지 않고 커밋하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># stage changes to tracked file &amp; commit in one step</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit -a</span></span></span></code></pre>\n</li>\n<li>간략한 커밋 메시지 commit message와 함께 커밋하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># stage &amp; commit &amp; enter message</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit -a -m </span><span class=\"mtk11\">&quot;commit message&quot;</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<h3>커밋 진행상황 보기</h3>\n<ul>\n<li>모든 커밋 히스토리 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># check history of all commits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git log</span></span></span></code></pre>\n</li>\n<li>각 커밋에서 수정된 사항을 줄 별로 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># show actual lines that changed in each commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git log -p</span></span></span></code></pre>\n</li>\n<li>커밋의 통계 정보 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># show statistics about the changes in the commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git log --stat</span></span></span></code></pre>\n</li>\n<li>커밋의 브랜치 트리 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># show commit branch tree</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git log --graph --oneline --all</span></span></span></code></pre>\n</li>\n<li>커밋 아이디 commit_id에 해당하는 커밋 정보 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># show the information about the commit and associated petches</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git show [commit_id]</span></span></span></code></pre>\n</li>\n<li>commit_ id1과 commit_ id2에 해당하는 두 커밋 비교하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># similar to Linux diff command</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git diff [commit_id1] [commit_id2]</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<h3>커밋 되돌리기</h3>\n<ul>\n<li>HEAD가 가리키는 브랜치가 commit_id를 가리키게 하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># resets the repo in the Index, the next snapshot to commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset --soft [commit_id]</span></span></span></code></pre>\n</li>\n<li>HEAD 브랜치를 이동하고 스테이징 에리어를 리셋하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># update Index to the snapshot that HEAD is pointing </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset --mixed [commit_id]</span></span></span></code></pre>\n</li>\n<li>HEAD 브랜치를 이동하고 스테이징 에리어와 워킹 디렉토리를 리셋하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># update Index to the snapshot that HEAD is pointing </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset --hard [commit_id]</span></span></span></code></pre>\n</li>\n<li>현재 스테이징 에리어에 있는 내용을 커밋 내용으로 덮어쓰기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># make changes to commits after-the-fact on local commits</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git commit --amend</span></span></span></code></pre>\n</li>\n<li>히스토리를 유지한채 새로운 커밋으로 커밋 commit_id로 되돌리기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># make a new commit which rolls back a previous commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git revert HEAD/[commit_id]</span></span></span></code></pre>\n</li>\n<li>커밋을 num_commit_to_reverse 개수만큼 되돌리기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># roll back [num_commit_to_reverse]-many commit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git reset --soft HEAD~[num_commit_to_reverse]</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<br>\n<h2>4. 브랜치 명령어 (Branch commands)</h2>\n<ul>\n<li>모든 브랜치 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># list all branches</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch</span></span></span></code></pre>\n</li>\n<li>읽기 전용 원격 브랜치 출력하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># shows read-only remote branches</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch -r</span></span></span></code></pre>\n</li>\n<li>브랜치 branch_name 생성하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># creates the branch_name branch</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch [branch_name]</span></span></span></code></pre>\n</li>\n<li>브랜치 branch_name으로 이동하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># switch to branch_name</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git checkout [branch_name]</span></span></span></code></pre>\n</li>\n<li>브랜치 branch_name을 생성하고 그 브랜치로 위치 이동하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># creates a new branch and switches to it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git checkout -b [branch_name]</span></span></span></code></pre>\n</li>\n<li>브랜치 branch_name 삭제하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># deletes the branch branch_name</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch -d [branch_name]</span></span></span></code></pre>\n</li>\n<li>브랜치 branch_name 삭제 강제하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># forcibly deletes the branch</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git branch -D [branch_name]</span></span></span></code></pre>\n</li>\n<li>브랜치 branch_name을 마스터 브랜치로 합치기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># joins branches together to the master branch</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git merge [branch_name]</span></span></span></code></pre>\n</li>\n<li>브랜치 충돌(merge conflicts)이 발생했을 때, 머지 취소하기\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># when merge conflicts, abort merge action</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git merge --abort</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<br>\n<h2>5. 깃허브 관련 명령어 (Github commands)</h2>\n<ul>\n<li>\n<p>깃허브는 <a href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">personal access token</a>을 사용해 계정의 권한을 조절하고 있다.</p>\n</li>\n<li>\n<p>깃허브에 push할 때는 파일당 <strong>120MB의 용량 제한</strong>이 있다. 이보다 큰 용량의 파일을 push하면 remote rejected 에러를 마주하게 된다.</p>\n</li>\n<li>\n<p>로컬 환경에 URL로 원격 르포 복제하기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># clone a remote repository into a local workspace</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git clone [URL] </span></span></span></code></pre>\n</li>\n<li>\n<p>로컬 파일을 원격 르포에 푸시하기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># push commits from local repo to a remote repo</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git push</span></span></span></code></pre>\n</li>\n<li>\n<p>원격 르포의 커밋을 로컬 환경에 별도의 브랜치로 복사해오기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># copy the commits done in the remote repository</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git fetch</span></span></span></code></pre>\n</li>\n<li>\n<p>원격 르포의 커밋을 로컬 환경의 브랜치와 머지하기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># fetch from remote &amp; merge</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git pull</span></span></span></code></pre>\n</li>\n<li>\n<p>원격 르포 출력하기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># List remote repos</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git remote</span></span></span></code></pre>\n</li>\n<li>\n<p>원격 르포 URL 출력하기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># show URL of remote repo</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git remote -v</span></span></span></code></pre>\n</li>\n<li>\n<p>원격 르포 remote_name 정보 출력하기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Describes a single remote repo</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git remote show [remote_URL]</span></span></span></code></pre>\n</li>\n<li>\n<p>원격 르포의 업데이트를 로컬 환경에 불러오기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Fetches the most up-to-date objects</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git remote update</span></span></span></code></pre>\n</li>\n<li>\n<p>로컬 르포가 연결된 원격 르포 new-url로 이전하기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># transfer a repository from origin to [new-url]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git remote set-url origin [new-url]</span></span></span></code></pre>\n</li>\n<li>\n<p>브랜치 branch_name의 베이스 커밋을 바꾸기</p>\n<pre class=\"grvsc-container abyss\" data-language=\"bash\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># change the base commit used for the branch [branch_name]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">git rebase [branch_name]</span></span></span></code></pre>\n</li>\n</ul>\n<br>\n<br>\n<h2>참고 자료</h2>\n<ol>\n<li>Git Docs (<a href=\"https://git-scm.com/doc\">link</a>)</li>\n<li>GitHub Docs (<a href=\"https://docs.github.com/en\">link</a>)</li>\n<li>Coursera, Google, Introduction to Git and Github (<a href=\"https://www.coursera.org/learn/introduction-git-github\">link</a>)</li>\n</ol>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .abyss { background-color: #000c18; }\n  .abyss .mtk3 { color: #384887; }\n  .abyss .mtk1 { color: #6688CC; }\n  .abyss .mtk11 { color: #22AA44; }\n  .abyss .mtk15 { color: #9966B8; }\n  .abyss .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"깃 치트 시트","date":"August 30, 2022"}}},"pageContext":{"slug":"/CS/Git/git-cheat-sheet/","previous":{"fields":{"slug":"/CS/Git/git-rebase/"},"frontmatter":{"title":"git rebase로 잔디 회복하기"}},"next":{"fields":{"slug":"/AI/NLP/konlpy/"},"frontmatter":{"title":"[KR] KoNLPy로 한국어 토큰화하기"}}}},"staticQueryHashes":["1185972000","3231742164"],"slicesMap":{}}