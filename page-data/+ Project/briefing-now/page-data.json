{"componentChunkName":"component---src-templates-blog-post-js","path":"/+ Project/briefing-now/","result":{"data":{"allMarkdownRemark":{"totalCount":51},"markdownRemark":{"id":"7f2ea952-e56c-53e3-9885-79d2f7ef8545","html":"<hr>\n<h3>AI 기사 브리핑 웹 서비스</h3>\n<!-- [프로젝트 페이지 가기 🔈](URL)-->\n<br>\n<h4>0. 기간 : 2023.05 ~ 진행중</h4>\n<h4>1. 주요 기능 :</h4>\n<ul>\n<li>MVP\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <code>Node.js</code> 환경 구현</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <code>JavaScript</code> 1분 마다 네이버 뉴스의 <a href=\"https://news.naver.com/main/main.naver?mode=LSD&#x26;mid=shm&#x26;sid1=100\">분야별 주요 뉴스</a> 스크레이핑</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <code>ainaize/kobart-news</code> HuggingFace API를 통해 뉴스 기사 요약 (<code>RESTful API</code>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>parcel</code> 번들링</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>Netlify</code> 배포</li>\n</ul>\n</li>\n<li>Advance\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Dockerization</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Fine-Tuning 또는 Prompting을 통한 결과 제어 (<code>nomic-ai/gpt4all-j</code>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 음성 생성을 통한 읽어주기 서비스 (<code>microsoft/speecht5_tts</code>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 뉴스 스크레이핑 또는 크롤링 대상 확대하기 (Twitter, 해외 뉴스 등)</li>\n</ul>\n</li>\n</ul>\n<br>\n<hr>\n<br>\n<br>\n<h3>계기</h3>\n<h4>Why AI?</h4>\n<p>ChatGPT의 이슈화로 AI 서비스에 대한 수요와 공급이 증가하고 있는데, 당장 한국어로 활용할 수 있는 어플리케이션은 크게 체감되지 않았으며 또한 AI 기술로 무엇을 할 수 있을지에 대한 고민이 생겼다. 따라서 \"Start Cheap\"의 모토로 API를 활용해 간단한 AI 서비스를 제공하는 웹 페이지를 구현하고, 다양한 모델을 실험해 보고자 한다.</p>\n<h4>Why JavaScript?</h4>\n<p>익숙한 Python으로 FastAPI를 활용해 구현할 것인지 익숙하지 않은 JavaScript를 활용할 것인지 고민이 있었다. 그러던 중 <code>AI서비스와 함께 누구나 만드는 웹 프로젝트! feat. ChatGPT</code> 라는 <a href=\"programmers.co.kr\">프로그래머스</a>에서 제공하는 짧은 강좌를 통해 JavaScript로 API를 활용한 간단한 웹서비스를 만들었다. ChatGPT를 활용하면 JavaScript로 개발이 가능하지 않을까 하는 생각에 이 프로젝트를 JavaScript로 구현하기로 했다.</p>\n<br>\n<h3>단계</h3>\n<h4>1. ChatGPT 답을 기반으로 Node.js 환경을 형성하고 JavaScript 코드를 작성했다.</h4>\n<ul>\n<li><code>axios</code>와 <code>cheerio</code>로 스크레이핑했다.</li>\n<li><code>iconv-lite</code>로 <code>charset=EUC-KR</code>로 작성된 페이지를 디코딩했다.</li>\n<li>이때 크롤링과 API를 과하게 요청하는 것을 방지하기 위해 1분 단위로 크롤링을 진행해 전역변수를 업데이트하고, <code>window.onload</code> 핸들러로 요청이 있을시에 내용을 전달하는 방식으로 구현했다.\n<ul>\n<li>1분 단위이면 서비스 페이지 접속량에 관계없이 하루에 1440회만 크롤링 및 API를 요청하는데, 네이버 검색 API가 하루 25000회로 제한되어 있는 것을 고려하면 적은 횟수이다.</li>\n</ul>\n</li>\n<li>RESTful하게 HuggingFace API를 호출했다.</li>\n</ul>\n<h4>2. 테스트와 로컬 서버를 구현했다.</h4>\n<ul>\n<li><code>mocha</code>로 테스트를 구현했다.</li>\n<li><code>express</code>로 local server를 구현했다.(<code>local host:3000</code>)</li>\n</ul>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n</style>","frontmatter":{"title":"[Ongoing] briefing-now","date":"May 22, 2023"}}},"pageContext":{"slug":"/+ Project/briefing-now/","previous":{"fields":{"slug":"/CS/Web/gatsby-plugin-katex/"},"frontmatter":{"title":"[Gatsby] Gatsby Plugin Katex 설치"}},"next":{"fields":{"slug":"/AI/Text/chatgpt-prompt-engineering/"},"frontmatter":{"title":"ChatGPT 프롬프트 엔지니어링 가이드라인"}}}},"staticQueryHashes":["1185972000","3231742164"],"slicesMap":{}}